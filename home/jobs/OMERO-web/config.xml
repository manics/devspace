<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.8.1">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>true</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>web</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
OMERO_DIST=$HOME/OMERO.server
if [ -e $OMERO_DIST ]; then
    if [ -e $HOME/omero-virtualenv ]; then
        #eval $(bash /opt/multi-config.sh ice3.5)
        sudo systemctl stop omero-web.service
        sleep 5
        sudo systemctl status omero-web.service || true
    fi
    rm -rf $OMERO_DIST
else
    sudo systemctl stop omero-web.service
    virtualenv $HOME/omero-virtualenv --system-site-packages
fi
      </command>
    </hudson.tasks.Shell>
    <hudson.plugins.copyartifact.CopyArtifact plugin="copyartifact@1.37">
      <project>OMERO-build</project>
      <filter>src/target/OMERO.py*zip</filter>
      <target></target>
      <excludes></excludes>
      <selector class="hudson.plugins.copyartifact.StatusBuildSelector"/>
      <flatten>true</flatten>
      <doNotFingerprintArtifacts>false</doNotFingerprintArtifacts>
    </hudson.plugins.copyartifact.CopyArtifact>
    <hudson.tasks.Shell>
      <command>
OMERO_DIST=$HOME/OMERO.server
OMERO_INSTALL=/tmp/omero-install/linux

ZIP=$(ls OMERO.py*.zip)
DIST=${ZIP%.zip}
unzip $ZIP
rm -f $ZIP
mv $WORKSPACE/$DIST $OMERO_DIST

source $HOME/omero-virtualenv/bin/activate

source $OMERO_INSTALL/settings.env

# redis IP
REDIS_IP=$(getent hosts 'redis' | awk '{print $1}')

pip install --upgrade --no-deps --force-reinstall -r $OMERO_DIST/share/web/requirements-py27-nginx.txt

pip install django-redis-cache>=1.6.5

#start-config
$OMERO_DIST/bin/omero config set omero.web.application_server &apos;wsgi-tcp&apos;
$OMERO_DIST/bin/omero config set omero.web.application_server.max_requests 0

$OMERO_DIST/bin/omero config set omero.web.prefix &apos;/web&apos;
$OMERO_DIST/bin/omero config set omero.web.static_url &apos;/web/static/&apos;
$OMERO_DIST/bin/omero config set omero.web.static_root &apos;/home/omero/static/web&apos;

$OMERO_DIST/bin/omero config set omero.web.session_engine &apos;django.contrib.sessions.backends.cache&apos;
$OMERO_DIST/bin/omero config set omero.web.caches &apos;{&quot;default&quot;: {&quot;BACKEND&quot;: &quot;redis_cache.RedisCache&quot;,&quot;LOCATION&quot;: &quot;$REDIS_IP:6379&quot;}}&apos;

$OMERO_DIST/bin/omero config set omero.web.application_server.host SPACENAME-ci.docker.openmicroscopy.org
$OMERO_DIST/bin/omero config set omero.web.application_server.port 4080

$OMERO_DIST/bin/omero web config nginx --http &quot;$OMERO_WEB_PORT&quot; &gt;$OMERO_DIST/nginx.conf.tmp

sudo -u root cp $OMERO_DIST/nginx.conf.tmp $HOME/nginx/omero-web.conf

cat $HOME/nginx/omero-web.conf

$OMERO_DIST/bin/omero config set omero.web.application_server.host 0.0.0.0
$OMERO_DIST/bin/omero config set omero.web.application_server.port 4080

#eval $(bash /opt/multi-config.sh ice3.5)

deactivate

sudo systemctl start omero-web.service

      </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.BuildTrigger>
      <childProjects>nginx</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>